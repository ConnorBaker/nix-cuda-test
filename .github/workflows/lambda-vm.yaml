name: Lambda VM

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      action:
        description: Action
        required: true
        type: choice
        options:
          - launch
          - terminate
      instance-type-name:
        description: Instance
        required: true
        type: choice
        options:
          - gpu_1x_a10
          - gpu_1x_a100
          - gpu_1x_a100_sxm4
          - gpu_1x_a6000
          - gpu_1x_h100_pcie
          - gpu_1x_rtx6000
          - gpu_2x_a100
          - gpu_2x_a6000
          - gpu_4x_a100
          - gpu_4x_a6000
          - gpu_8x_a100
          - gpu_8x_a100_80gb_sxm4
          - gpu_8x_v100
      instance-id:
        description: Instance ID to use when terminating an instance (defaults to all instances of the given type)
        required: false
        type: string
  workflow_call:
    inputs:
      action:
        description: Action
        required: true
        type: string
      instance-type-name:
        description: Instance
        required: true
        type: string
      instance-id:
        description: Instance ID to use when terminating an instance (defaults to all instances of the given type)
        required: false
        type: string
    outputs:
      json:
        description: JSON output from the workflow call to launch an instance
        value: ${{ jobs.launch-lambda-vm.outputs.json }}
    secrets:
      CANT_CACHE_ME_NIX_SECRET_SIGNING_KEY:
        description: Nix secret signing key
        required: true
      CLOUDFLARE_R2_ACCESS_KEY_ID:
        description: Cloudflare R2 access key ID
        required: true
      CLOUDFLARE_R2_SECRET_ACCESS_KEY:
        description: Cloudflare R2 secret access key
        required: true
      LAMBDA_CLOUD_RUNNER_API_KEY:
        description: Lambda Cloud API key
        required: true
      RUNNER_AUTH_TOKEN:
        description: GitHub Runner auth token
        required: true
      RUNNER_SSH_PRIVATE_KEY:
        description: GitHub Runner SSH private key
        required: true
      RUNNER_SSH_PUBLIC_KEY:
        description: GitHub Runner SSH public key
        required: true


jobs:
  launch-lambda-vm:
    name: Launch Lambda VM
    runs-on: ubuntu-latest
    if: ${{ inputs.action == 'launch' }}
    concurrency: lambda-vm-${{ inputs.instance-type-name }}
    outputs:
      json: ${{ steps.wait-for-instance-status.outputs.json }}
    env:
      # Allows us to avoid passing --api-key to every invocation of lambda-cloud
      LAMBDA_CLOUD_API_KEY: ${{ secrets.LAMBDA_CLOUD_RUNNER_API_KEY }}
    steps:
      - name: Checkouts
        uses: actions/checkout@v3

      - name: Set up Nix
        uses: ./.github/actions/nix-setup
        with:
          cant-cache-me-nix-secret-signing-key: ${{ secrets.CANT_CACHE_ME_NIX_SECRET_SIGNING_KEY }}
          cloudflare-r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          cloudflare-r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}

      - name: Install lambda-cloud
        run: nix profile install github:ConnorBaker/lambda-cloud#lambda-cloud --refresh

      - name: Check if Lambda Cloud has our GitHub Runner SSH keys available
        id: github-runner-ssh-keys
        run: |
          lambda-cloud --info get-ssh-keys \
            | tee /dev/stderr \
            | jq -cr 'any(.[]; .name == "github-runner") | "json=\(.)"' \
            | tee -a "$GITHUB_OUTPUT"

      - name: Add GitHub Runner SSH key to Lambda Cloud
        if: ${{ !fromJSON(steps.github-runner-ssh-keys.outputs.json) }}
        run: |
          lambda-cloud --info add-ssh-key \
            --ssh-key-name github-runner \
            --ssh-public-key "${{ secrets.RUNNER_SSH_PUBLIC_KEY }}"

      # NOTE: Assumes that we can only ever launch a single instance at a time with lambda-cloud
      - name: Launch the Lambda Cloud instance
        id: launch-instance
        run: |
          lambda-cloud --info launch-instance \
              --instance-type-name "${{ inputs.instance-type-name }}" \
              --instance-name "github-runner-${{ inputs.instance-type-name }}" \
              --ssh-key-name github-runner \
            | tee /dev/stderr \
            | jq -cr '"id=\(.[0])"' \
            | tee -a "$GITHUB_OUTPUT"

      - name: Wait for the instance to be active
        id: wait-for-instance-status
        run: |
          lambda-cloud --info wait-for-instance-status \
              --instance-id "${{ steps.launch-instance.outputs.id }}" \
              --instance-status active \
            | tee /dev/stderr \
            | jq -cr '"json=\(.)"' \
            | tee -a "$GITHUB_OUTPUT"

  terminate-lambda-vm:
    name: Terminate Lambda VM
    runs-on: ubuntu-latest
    if: ${{ inputs.action == 'terminate' }}
    concurrency: lambda-vm-${{ inputs.instance-type-name }}
    env:
      # Allows us to avoid passing --api-key to every invocation of lambda-cloud
      LAMBDA_CLOUD_API_KEY: ${{ secrets.LAMBDA_CLOUD_RUNNER_API_KEY }}
    steps:
      - name: Checkouts
        uses: actions/checkout@v3

      - name: Set up Nix
        uses: ./.github/actions/nix-setup
        with:
          cant-cache-me-nix-secret-signing-key: ${{ secrets.CANT_CACHE_ME_NIX_SECRET_SIGNING_KEY }}
          cloudflare-r2-access-key-id: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          cloudflare-r2-secret-access-key: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}

      - name: Install lambda-cloud
        run: nix profile install github:ConnorBaker/lambda-cloud#lambda-cloud --refresh

      - name: Get running instances matching the instance type name
        id: running-instances
        run: |
          lambda-cloud --info get-instances \
            | tee /dev/stderr \
            | jq -cr 'map(select(.status != "terminated"))' \
            | tee /dev/stderr \
            | jq -cr 'map(select(.name == "github-runner-${{ inputs.instance-type-name }}"))' \
            | tee /dev/stderr \
            | jq -cr 'map(.id)' \
            | tee /dev/stderr \
            | jq -cr '"json=\(.)"' \
            | tee -a "$GITHUB_OUTPUT"

      - name: Terminate matching instances
        id: instance-id
        env:
          IDS: ${{ steps.running-instances.outputs.json }}
        run: |
          if [[ '${{ env.IDS }}' == '[]' ]]; then
            echo "No instances found with the name 'github-runner-${{ inputs.instance-type-name }}'"
            exit 1
          fi

          if [[ "${{ inputs.instance-id }}" != "" ]]; then
            echo "Terminating instance ${{ inputs.instance-id }}..."
            lambda-cloud --info terminate-instance --instance-id "${{ inputs.instance-id }}"
            exit 0
          elif
            echo "Terminating all instances matching the name 'github-runner-${{ inputs.instance-type-name }}'..."
            for id in $(jq -cr '.[]' <<< '${{ env.IDS }}'); do
              echo "Terminating instance $id..."
              lambda-cloud --info terminate-instance --instance-id "$id"
            done
          fi

  # TODO(@connorbaker): Add checks to make idempotent; although the first script will exit with an
  # error if we attempt to set up a VM that already exists.
  setup-github-runner-lambda-vm:
    name: Setup GitHub Runner on Lambda VM
    runs-on: ubuntu-latest
    needs: launch-lambda-vm
    steps:
      - name: Set up the GitHub runner SSH keys
        run: |
          mkdir -p "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          echo "${{ secrets.RUNNER_SSH_PRIVATE_KEY }}" > "$HOME/.ssh/ed25519"
          chmod 600 "$HOME/.ssh/ed25519"
          echo "${{ secrets.RUNNER_SSH_PUBLIC_KEY }}" > "$HOME/.ssh/ed25519.pub"
          chmod 600 "$HOME/.ssh/ed25519.pub"
          cat >> "$HOME/.ssh/config" <<EOF
          Host vm
            HostName ${{ fromJSON(needs.launch-lambda-vm.outputs.json).ip }}
            User ubuntu
            IdentityFile $HOME/.ssh/ed25519
            StrictHostKeyChecking no
          EOF
          chmod 600 "$HOME/.ssh/config"

      - name: Create a folder
        run: ssh vm "mkdir actions-runner"

      - name: Download the latest runner package
        run: |
          ssh vm <<EOF
          cd actions-runner;
          curl -o actions-runner-linux-x64-2.304.0.tar.gz \
            -L "https://github.com/actions/runner/releases/download/v2.304.0/actions-runner-linux-x64-2.304.0.tar.gz"
          EOF

      - name: Validate the hash
        run: |
          ssh vm <<EOF
          cd actions-runner;
          echo '292e8770bdeafca135c2c06cd5426f9dda49a775568f45fcc25cc2b576afc12f  actions-runner-linux-x64-2.304.0.tar.gz' \
            | shasum -a 256 -c
          EOF

      - name: Extract the installer
        run: |
          ssh vm <<EOF
          cd actions-runner;
          tar xzf ./actions-runner-linux-x64-2.304.0.tar.gz
          EOF

      - name: Generate an authentication token for the runner
        id: self-hosted-runner-token
        env:
          GH_TOKEN: ${{ secrets.RUNNER_AUTH_TOKEN }}
        run: |
          gh api /repos/ConnorBaker/nix-cuda-test/actions/runners/registration-token \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
            | jq -cr '"token=\(.token)"' \
            | tee -a "$GITHUB_OUTPUT"

      - name: Configure the runner
        run: |
          ssh vm <<EOF
          cd actions-runner;
          ./config.sh \
            --labels ${{ inputs.instance-type-name }} \
            --name ${{ inputs.instance-type-name }} \
            --token ${{ steps.self-hosted-runner-token.outputs.token }} \
            --unattended \
            --url https://github.com/ConnorBaker/nix-cuda-test
          EOF

      - name: Install the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh install"

      - name: Start the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh start"

      - name: Check the status of the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh status"
