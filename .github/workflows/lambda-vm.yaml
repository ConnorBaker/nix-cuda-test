name: Lambda VM

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      action:
        description: Action
        required: true
        type: choice
        options:
          - start
          - terminate
      instance-type-name:
        description: Instance
        required: true
        type: choice
        options:
          - gpu_1x_a10
          - gpu_1x_a100
          - gpu_1x_a100_sxm4
          - gpu_1x_a6000
          - gpu_1x_h100_pcie
          - gpu_1x_rtx6000
          - gpu_2x_a100
          - gpu_2x_a6000
          - gpu_4x_a100
          - gpu_4x_a6000
          - gpu_8x_a100
          - gpu_8x_a100_80gb_sxm4
          - gpu_8x_v100

jobs:
  action-lambda-vm:
    name: Lambda VM
    runs-on: ubuntu-latest
    concurrency: lambda-vm-${{ inputs.instance-type-name }}
    outputs:
      ip: ${{ steps.action-lambda-vm.outputs.ip }}
    steps:
      - name: Checkouts
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip

      - run: python3 -m pip install -U --pre -r requirements.txt
        working-directory: ./.github/scripts/lambda_vm

      - name: Run python script
        id: action-lambda-vm
        working-directory: ./.github/scripts
        run: |
          python3 -m lambda_vm \
            --action "${{ inputs.action }}" \
            --api-key "${{ secrets.LAMBDA_CLOUD_RUNNER_API_KEY }}" \
            --instance-type-name "${{ inputs.instance-type-name }}" \
          | sed -e 's/^/ip=/' \
          | tee -a "$GITHUB_OUTPUT"

  # TODO(@connorbaker): Add checks to make idempotent; although the first script will exit with an
  # error if we attempt to set up a VM that already exists.
  setup-lambda-vm:
    name: Setup Lambda VM
    runs-on: ubuntu-latest
    needs: action-lambda-vm
    if: ${{ inputs.action == 'start' }}
    concurrency: lambda-vm-${{ inputs.instance-type-name }}
    steps:
      - name: Set up the GitHub runner SSH keys
        run: |
          mkdir -p "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          echo "${{ secrets.RUNNER_SSH_PRIVATE_KEY }}" > "$HOME/.ssh/ed25519"
          chmod 600 "$HOME/.ssh/ed25519"
          echo "${{ secrets.RUNNER_SSH_PUBLIC_KEY }}" > "$HOME/.ssh/ed25519.pub"
          chmod 600 "$HOME/.ssh/ed25519.pub"
          cat >> "$HOME/.ssh/config" <<EOF
          Host vm
            HostName ${{ needs.action-lambda-vm.outputs.ip }}
            User ubuntu
            IdentityFile $HOME/.ssh/ed25519
            StrictHostKeyChecking no
          EOF
          chmod 600 "$HOME/.ssh/config"

      - name: Create a folder
        run: ssh vm "mkdir actions-runner"

      - name: Download the latest runner package
        run: |
          ssh vm <<EOF
          cd actions-runner;
          curl -o actions-runner-linux-x64-2.304.0.tar.gz \
            -L "https://github.com/actions/runner/releases/download/v2.304.0/actions-runner-linux-x64-2.304.0.tar.gz"
          EOF

      - name: Validate the hash
        run: |
          ssh vm <<EOF
          cd actions-runner;
          echo '292e8770bdeafca135c2c06cd5426f9dda49a775568f45fcc25cc2b576afc12f  actions-runner-linux-x64-2.304.0.tar.gz' \
            | shasum -a 256 -c
          EOF

      - name: Extract the installer
        run: |
          ssh vm <<EOF
          cd actions-runner;
          tar xzf ./actions-runner-linux-x64-2.304.0.tar.gz
          EOF

      - name: Generate an authentication token for the runner
        id: self-hosted-runner-token
        env:
            GH_TOKEN: ${{ secrets.RUNNER_AUTH_TOKEN }}
        run: |
          gh api /repos/ConnorBaker/nix-cuda-test/actions/runners/registration-token \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
            | jq -cr '"token=\(.token)"' \
            | tee -a "$GITHUB_OUTPUT"

      - name: Configure the runner
        run: |
          ssh vm <<EOF
          cd actions-runner;
          ./config.sh \
            --labels ${{ inputs.instance-type-name }} \
            --name ${{ inputs.instance-type-name }} \
            --token ${{ steps.self-hosted-runner-token.outputs.token }} \
            --unattended \
            --url https://github.com/ConnorBaker/nix-cuda-test
          EOF

      - name: Install the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh install"

      - name: Start the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh start"

      - name: Check the status of the service
        run: ssh vm "cd actions-runner && sudo ./svc.sh status"
